generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          String   @id @default(cuid())
  name        String
  document    String   @unique // CNPJ
  email       String   @unique
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  planId      String
  isActive    Boolean  @default(true)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  plan        Plan     @relation(fields: [planId], references: [id])
  users       User[]
  customers   Customer[]
  workOrders  WorkOrder[]
  products    Product[]
  invoices    Invoice[]
  notifications Notification[]

  @@map("companies")
}

model Plan {
  id              String   @id @default(cuid())
  name            String
  description     String?
  price           Float
  maxUsers        Int
  maxWorkOrders   Int      @default(-1) // -1 = unlimited
  maxStorage      Int      @default(-1) // in MB, -1 = unlimited
  features        Json     // Array of features
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  companies       Company[]

  @@map("plans")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String
  role        UserRole @default(EMPLOYEE)
  companyId   String?
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company     Company? @relation(fields: [companyId], references: [id])
  workOrders  WorkOrder[]
  notifications Notification[]

  @@map("users")
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String
  document    String   // CPF or CNPJ
  address     String?
  city        String?
  state       String?
  zipCode     String?
  companyId   String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company     Company @relation(fields: [companyId], references: [id])
  workOrders  WorkOrder[]
  devices     Device[]

  @@unique([document, companyId])
  @@map("customers")
}

model Device {
  id          String   @id @default(cuid())
  brand       String
  model       String
  serialNumber String?
  description String?
  customerId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  customer    Customer @relation(fields: [customerId], references: [id])
  workOrders  WorkOrder[]

  @@map("devices")
}

model WorkOrder {
  id              String        @id @default(cuid())
  number          String        @unique
  title           String
  description     String
  status          WorkOrderStatus @default(PENDING)
  priority        Priority      @default(MEDIUM)
  estimatedHours  Float?
  actualHours     Float?
  estimatedCost   Float?
  actualCost      Float?
  customerId      String
  deviceId        String?
  companyId       String
  assignedToId    String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  completedAt     DateTime?

  customer        Customer @relation(fields: [customerId], references: [id])
  device          Device?  @relation(fields: [deviceId], references: [id])
  company         Company  @relation(fields: [companyId], references: [id])
  assignedTo      User?    @relation(fields: [assignedToId], references: [id])
  
  items           WorkOrderItem[]
  files           WorkOrderFile[]
  timeline        WorkOrderTimeline[]
  budgetApproval  BudgetApproval?

  @@map("work_orders")
}

model WorkOrderItem {
  id            String    @id @default(cuid())
  workOrderId   String
  productId     String?
  description   String
  quantity      Float
  unitPrice     Float
  totalPrice    Float
  type          ItemType  @default(SERVICE)
  createdAt     DateTime  @default(now())

  workOrder     WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)
  product       Product?  @relation(fields: [productId], references: [id])

  @@map("work_order_items")
}

model WorkOrderFile {
  id          String   @id @default(cuid())
  workOrderId String
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  type        FileType @default(PHOTO)
  createdAt   DateTime @default(now())

  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@map("work_order_files")
}

model WorkOrderTimeline {
  id          String   @id @default(cuid())
  workOrderId String
  action      String
  description String?
  userId      String?
  createdAt   DateTime @default(now())

  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@map("work_order_timeline")
}

model BudgetApproval {
  id          String   @id @default(cuid())
  workOrderId String   @unique
  status      ApprovalStatus @default(PENDING)
  totalAmount Float
  approvedAt  DateTime?
  rejectedAt  DateTime?
  reason      String?
  createdAt   DateTime @default(now())

  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  @@map("budget_approvals")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  sku         String?
  price       Float
  cost        Float?
  stock       Int      @default(0)
  minStock    Int      @default(0)
  companyId   String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company     Company @relation(fields: [companyId], references: [id])
  workOrderItems WorkOrderItem[]

  @@unique([sku, companyId])
  @@map("products")
}

model Invoice {
  id          String   @id @default(cuid())
  number      String   @unique
  customerId  String?
  companyId   String
  amount      Float
  status      InvoiceStatus @default(PENDING)
  dueDate     DateTime
  paidAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company     Company @relation(fields: [companyId], references: [id])

  @@map("invoices")
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  message     String
  type        NotificationType @default(INFO)
  userId      String?
  companyId   String?
  isRead      Boolean  @default(false)
  sentAt      DateTime?
  createdAt   DateTime @default(now())

  user        User?    @relation(fields: [userId], references: [id])
  company     Company? @relation(fields: [companyId], references: [id])

  @@map("notifications")
}

enum UserRole {
  SUPERADMIN
  ADMIN
  MANAGER
  EMPLOYEE
  CLIENT
}

enum WorkOrderStatus {
  PENDING
  IN_PROGRESS
  WAITING_PARTS
  WAITING_APPROVAL
  APPROVED
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ItemType {
  PRODUCT
  SERVICE
  LABOR
}

enum FileType {
  PHOTO
  DOCUMENT
  VIDEO
  OTHER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}
